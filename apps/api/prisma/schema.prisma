// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  BUSINESS
  USER
  VISITOR
}

model User {
  id                 String    @id @default(cuid())
  name               String
  email              String    @unique
  password           String
  hashedRefreshToken String?
  role               Role      @default(USER)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  stores             Store[]
  orders             Order[]
  comments           Comment[]
}

model Store {
  id          String      @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  products    Product[]
  billboards  Billboard[]
  orders      Order[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Float
  storeId     String
  store       Store       @relation(fields: [storeId], references: [id])
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  sizes       Size[]
  colors      Color[]
  images      Image[]
  comments    Comment[]
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Category {
  id        String    @id @default(cuid())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Billboard {
  id        String   @id @default(cuid())
  label     String
  imageId   String   @unique
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  storeId   String
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        String     @id @default(cuid())
  url       String
  name      String?
  productId String?
  product   Product?   @relation(fields: [productId], references: [id])
  billboard Billboard?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  rating    Int
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         String      @id @default(cuid())
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  storeId    String
  store      Store       @relation(fields: [storeId], references: [id])
  status     OrderStatus @default(PENDING)
  totalPrice Float
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Size {
  id        String    @id @default(cuid())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Color {
  id        String    @id @default(cuid())
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
